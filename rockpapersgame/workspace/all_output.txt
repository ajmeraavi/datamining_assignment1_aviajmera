Based on the requirements, here are the core classes, functions, and methods that will be necessary for the Rock, Paper, Scissors game:

1. Game:
   - `start_game()`: Starts the game and initializes the GUI.
   - `play_round(player_choice)`: Handles the logic for playing a round of Rock, Paper, Scissors.
   - `reset_game()`: Resets the game state.

2. Player:
   - `make_choice(choice)`: Sets the player's choice (rock, paper, or scissors).

3. ComputerPlayer (inherits from Player):
   - `make_choice()`: Generates a random choice for the computer player.

4. GUI:
   - `create_widgets()`: Creates the GUI widgets.
   - `update_score()`: Updates the score display.
   - `show_result(result)`: Displays the result of a round.
   - `disable_buttons()`: Disables the choice buttons.
   - `enable_buttons()`: Enables the choice buttons.
   - `reset_game()`: Resets the game state.

Now let's proceed with the file structure and code implementation.

1. main.py

```python
import tkinter as tk
from game import Game
from gui import GUI

def main():
    root = tk.Tk()
    game = Game()
    gui = GUI(root, game)
    gui.create_widgets()
    root.mainloop()

if __name__ == "__main__":
    main()
```

2. game.py

```python
from player import Player
from computer_player import ComputerPlayer

class Game:
    def __init__(self):
        self.player = Player()
        self.computer = ComputerPlayer()
        self.player_score = 0
        self.computer_score = 0

    def start_game(self):
        self.player_score = 0
        self.computer_score = 0

    def play_round(self, player_choice):
        self.player.make_choice(player_choice)
        self.computer.make_choice()
        result = self.get_round_result()
        if result == "win":
            self.player_score += 1
        elif result == "lose":
            self.computer_score += 1
        return result

    def get_round_result(self):
        player_choice = self.player.choice
        computer_choice = self.computer.choice
        if player_choice == computer_choice:
            return "tie"
        elif (
            (player_choice == "rock" and computer_choice == "scissors")
            or (player_choice == "paper" and computer_choice == "rock")
            or (player_choice == "scissors" and computer_choice == "paper")
        ):
            return "win"
        else:
            return "lose"

    def reset_game(self):
        self.player.reset_choice()
        self.computer.reset_choice()
        self.player_score = 0
        self.computer_score = 0
```

3. player.py

```python
class Player:
    def __init__(self):
        self.choice = None

    def make_choice(self, choice):
        self.choice = choice

    def reset_choice(self):
        self.choice = None
```

4. computer_player.py

```python
import random

class ComputerPlayer(Player):
    def make_choice(self):
        choices = ["rock", "paper", "scissors"]
        self.choice = random.choice(choices)
```

5. gui.py

```python
import tkinter as tk
from tkinter import messagebox

class GUI:
    def __init__(self, root, game):
        self.root = root
        self.game = game
        self.choice_buttons = []
        self.score_label = None

    def create_widgets(self):
        self.root.title("Rock, Paper, Scissors")

        # Score label
        self.score_label = tk.Label(self.root, text="Player: 0  Computer: 0")
        self.score_label.pack()

        # Choice buttons
        choices = ["rock", "paper", "scissors"]
        for choice in choices:
            button = tk.Button(
                self.root,
                text=choice,
                command=lambda choice=choice: self.play_round(choice),
            )
            button.pack()
            self.choice_buttons.append(button)

        # Reset button
        reset_button = tk.Button(
            self.root, text="Reset", command=self.reset_game
        )
        reset_button.pack()

    def play_round(self, player_choice):
        result = self.game.play_round(player_choice)
        self.update_score()
        self.show_result(result)

    def update_score(self):
        player_score = self.game.player_score
        computer_score = self.game.computer_score
        self.score_label.config(text=f"Player: {player_score}  Computer: {computer_score}")

    def show_result(self, result):
        if result == "win":
            messagebox.showinfo("Result", "You win!")
        elif result == "lose":
            messagebox.showinfo("Result", "You lose!")
        else:
            messagebox.showinfo("Result", "It's a tie!")

    def reset_game(self):
        self.game.reset_game()
        self.update_score()
```

This is the complete implementation of the Rock, Paper, Scissors game with GUI in Python using the tkinter library.